/**
 * DispatchDisgoAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.AccountsController;
const Datum1 = testerlib.Datum1;
const ListDelegatesResponse = testerlib.ListDelegatesResponse;
const Receipt = testerlib.Receipt;
const ListTransactionsResponse = testerlib.ListTransactionsResponse;
const HttpEndpoint = testerlib.HttpEndpoint;
const GrpcEndpoint = testerlib.GrpcEndpoint;
const Datum = testerlib.Datum;


describe("AccountsController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Call to retrieve all transactions filtered using from parameter (or to).



#### Example request
```shell
curl 'http://{{ipAddress}}:{{port}}/v1/transactions/to/{{address}}'
```

#### Example response
```shell
{
    "status": "Ok",
    "humanReadableStatus": "Ok",
    "data": [
        {
            "hash": "{{hash}}",
            "type": 2,
            "from": "{{from}}",
            "to": "{{to}}",
            "abi": "{{abi}}",
            "method": "plusOne",
            "params": [
                1
            ],
            "time": 1535528027657,
            "signature": "{{signature}}",
            "hertz": 2,
            "receipt": {
                "transactionHash": "{{txHash}}",
                "status": "Ok",
                "contractAddress": "{{address}}",
                "contractResult": [
                    2
                ],
                "created": "2018-08-29T07:33:52.918897036Z"
            },
            "gossip": [
                {
                    "hash": "{{hash}}",
                    "address": "{{address}}",
                    "transactionHash": "{{txHash}}",
                    "time": 1535528027905,
                    "signature": "{{signature}}"
                },...
            ]
        },...
     ],
    "created": "2018-09-06T00:11:12.44461441Z"
}
```
     */
    it("should testListTransactionsToAnAddress response", function testListTransactionsToAnAddressTest(done) {
        // parameters for the API call
        let to = '{{accountAddress}}';
        let page = '{{pageNumber}}';

        controller.listTransactionsToAnAddress(to, page, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * Call to retrieve all transactions filtered using from parameter (or to).


#### Example request
```shell
curl 'http://{{ipAddress}}:{{port}}/v1/transactions/from/{{address}}'
```

#### Example response
```shell
{
    "status": "Ok",
    "humanReadableStatus": "Ok",
    "data": [
        {
            "hash": "{{hash}}",
            "type": 2,
            "from": "{{from}}",
            "to": "{{to}}",
            "abi": "{{abi}}",
            "method": "plusOne",
            "params": [
                1
            ],
            "time": 1535528027657,
            "signature": "{{signature}}",
            "hertz": 2,
            "receipt": {
                "transactionHash": "{{txHash}}",
                "status": "Ok",
                "contractAddress": "{{address}}",
                "contractResult": [
                    2
                ],
                "created": "2018-08-29T07:33:52.918897036Z"
            },
            "gossip": [
                {
                    "hash": "{{hash}}",
                    "address": "{{address}}",
                    "transactionHash": "{{txHash}}",
                    "time": 1535528027905,
                    "signature": "{{signature}}"
                },...
            ]
        },...
     ],
    "created": "2018-09-06T00:11:12.44461441Z"
}
```
     */
    it("should testListTransactionsFromAnAddress response", function testListTransactionsFromAnAddressTest(done) {
        // parameters for the API call
        let from = '{{accountAddress}}';
        let page = '{{pageNumber}}';

        controller.listTransactionsFromAnAddress(from, page, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });
});
