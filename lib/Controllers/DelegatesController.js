/**
 * DispatchDisgoAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _servers = require('../Servers');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class DelegatesController {
    /**
     * This URL / API call will return a list of all delegates on the Dispatch network.
     * 
     * #### Example request
     * ```shell
     * curl 'http://seed.dispatchlabs.io:1975/v1/delegates'
     * ```
     * #### Example response
     * ```shell
     * {
     * "status": "Ok",
     * "humanReadableStatus": "Ok",
     * "data": [
     * {
     * "address": "{{address}}",
     * "grpcEndpoint": {
     * "host": "35.203.147.207",
     * "port": 1973
     * },
     * "httpEndpoint": {
     * "host": "35.203.147.207",
     * "port": 1975
     * },
     * "type": "Delegate"
     * },
     * ..... ],
     * "created": "2018-09-05T22:30:28.845499275Z"
     * }
     * ```
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static listDelegates(callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_1);

        const _queryBuilder = `${_baseUri}${'/delegates'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'ListDelegatesResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = DelegatesController;
