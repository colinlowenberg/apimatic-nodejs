/**
 * DispatchDisgoAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _servers = require('../Servers');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class AccountsController {
    /**
     * This endpoint retrieves the detailed account information and balance of an address.
     * #### Example request
     * ```shell
     * curl 'http://{{ipAddress}}:{{port}}/v1/accounts/{{address}}'
     * ```
     * 
     * #### Example response
     * ```shell
     * {
     * "status": "Ok",
     * "humanReadableStatus": "Ok",
     * "data": {
     * "address": "{{address}}",
     * "name": "",
     * "balance": 0,
     * "transactionHash": "{{hash}}",
     * "updated": "2018-08-28T21:20:41.192534758Z",
     * "created": "2018-08-28T21:20:29.358826557Z",
     * "nonce": 0
     * },
     * "created": "2018-09-05T23:57:13.958756313Z"
     * }
     * ```
     *
     * @param {string} accountAddress TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getAccountByAddress(accountAddress, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_2);

        let _queryBuilder = `${_baseUri}${'/accounts/{accountAddress}'}`;

        // process template parameters
        _queryBuilder = _apiHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            accountAddress,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Call to retrieve all transactions filtered using from parameter (or to).
     * 
     * #### Example request
     * ```shell
     * curl 'http://{{ipAddress}}:{{port}}/v1/transactions/to/{{address}}'
     * ```
     * #### Example response
     * ```shell
     * {
     * "status": "Ok",
     * "humanReadableStatus": "Ok",
     * "data": [
     * {
     * "hash": "{{hash}}",
     * "type": 2,
     * "from": "{{from}}",
     * "to": "{{to}}",
     * "abi": "{{abi}}",
     * "method": "plusOne",
     * "params": [
     * 1
     * ],
     * "time": 1535528027657,
     * "signature": "{{signature}}",
     * "hertz": 2,
     * "receipt": {
     * "transactionHash": "{{txHash}}",
     * "status": "Ok",
     * "contractAddress": "{{address}}",
     * "contractResult": [
     * 2
     * ],
     * "created": "2018-08-29T07:33:52.918897036Z"
     * },
     * "gossip": [
     * {
     * "hash": "{{hash}}",
     * "address": "{{address}}",
     * "transactionHash": "{{txHash}}",
     * "time": 1535528027905,
     * "signature": "{{signature}}"
     * },...
     * ]
     * },...
     * ],
     * "created": "2018-09-06T00:11:12.44461441Z"
     * }
     * ```
     *
     * @param {string} to TODO: type description here
     * @param {string} page TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static listTransactionsToAnAddress(to, page, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_2);

        let _queryBuilder = `${_baseUri}${'/transactions'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            to,
            page,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Call to retrieve all transactions filtered using from parameter (or to).
     * 
     * #### Example request
     * ```shell
     * curl 'http://{{ipAddress}}:{{port}}/v1/transactions/from/{{address}}'
     * ```
     * #### Example response
     * ```shell
     * {
     * "status": "Ok",
     * "humanReadableStatus": "Ok",
     * "data": [
     * {
     * "hash": "{{hash}}",
     * "type": 2,
     * "from": "{{from}}",
     * "to": "{{to}}",
     * "abi": "{{abi}}",
     * "method": "plusOne",
     * "params": [
     * 1
     * ],
     * "time": 1535528027657,
     * "signature": "{{signature}}",
     * "hertz": 2,
     * "receipt": {
     * "transactionHash": "{{txHash}}",
     * "status": "Ok",
     * "contractAddress": "{{address}}",
     * "contractResult": [
     * 2
     * ],
     * "created": "2018-08-29T07:33:52.918897036Z"
     * },
     * "gossip": [
     * {
     * "hash": "{{hash}}",
     * "address": "{{address}}",
     * "transactionHash": "{{txHash}}",
     * "time": 1535528027905,
     * "signature": "{{signature}}"
     * },...
     * ]
     * },...
     * ],
     * "created": "2018-09-06T00:11:12.44461441Z"
     * }
     * ```
     *
     * @param {string} from TODO: type description here
     * @param {string} page TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static listTransactionsFromAnAddress(from, page, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_2);

        let _queryBuilder = `${_baseUri}${'/transactions'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            from,
            page,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    const parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = AccountsController;
